(letrec ([stack-new$0 (lambda (size.1)
                        (locals (stack.2 store.3 meths.4)
                          (begin
                            (set! store.3 (alloc (* 8 size.1)))
                            (set! meths.4 (alloc (* 3 8)))
                            (set! stack.2 (alloc (* 3 8)))
                            (mset! meths.4 0 stack-push$2)
                            (mset! meths.4 8 stack-pop$3)
                            (mset! meths.4 16 stack-top$4)
                            (mset! stack.2 0 meths.4)
                            (mset! stack.2 8 0)
                            (mset! stack.2 16 store.3)
                            stack.2)))]
         [invoke$1 (lambda (obj.5 meth-idx.6)
                     (locals () (mref (mref obj.5 0) (* meth-idx.6 8))))]
         [stack-push$2 (lambda (self.7 val.8)
                         (locals ()
                           (begin
                             (mset!
                               (mref self.7 16)
                               (* (mref self.7 8) 8)
                               val.8)
                             (mset! self.7 8 (+ (mref self.7 8) 1))
                             self.7)))]
         [stack-pop$3 (lambda (self.9)
                        (locals ()
                          (begin
                            (mset! self.9 8 (- (mref 8 self.9) 1))
                            (mref
                              (mref self.9 16)
                              (* (mref self.9 8) 8)))))]
         [stack-top$4 (lambda (self.9)
                        (locals ()
                          (mref
                            (mref self.9 16)
                            (* (- (mref 8 self.9) 1) 8))))])
  (locals (s1.10 s2.11)
    (begin
      (set! s1.10 (stack-new$0 10))
      ((invoke$1 s1.10 0) s1.10 10)
      ((invoke$1 s1.10 0) s1.10 20)
      ((invoke$1 s1.10 0) s1.10 30)
      ((invoke$1 s1.10 0) s1.10 40)
      ((invoke$1 s1.10 0) s1.10 50)
      ((invoke$1 s1.10 0) s1.10 60)
      ((invoke$1 s1.10 0) s1.10 70)
      ((invoke$1 s1.10 0) s1.10 80)
      ((invoke$1 s1.10 0) s1.10 90)
      ((invoke$1 s1.10 0) s1.10 100)
      (set! s2.11 (stack-new$0 5))
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      (+ (+ (+ ((invoke$1 s2.11 2) s2.11)
               ((invoke$1 s2.11 1) s2.11))
            (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11)))
         (+ (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11))
            (+ (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11))
               (+ ((invoke$1 s2.11 2) s2.11)
                  ((invoke$1 s2.11 1) s2.11))))))))

verify-uil:
(letrec ([stack-new$0 (lambda (size.1)
                        (locals (stack.2 store.3 meths.4)
                          (begin
                            (set! store.3 (alloc (* 8 size.1)))
                            (set! meths.4 (alloc (* 3 8)))
                            (set! stack.2 (alloc (* 3 8)))
                            (mset! meths.4 0 stack-push$2)
                            (mset! meths.4 8 stack-pop$3)
                            (mset! meths.4 16 stack-top$4)
                            (mset! stack.2 0 meths.4)
                            (mset! stack.2 8 0)
                            (mset! stack.2 16 store.3)
                            stack.2)))]
         [invoke$1 (lambda (obj.5 meth-idx.6)
                     (locals () (mref (mref obj.5 0) (* meth-idx.6 8))))]
         [stack-push$2 (lambda (self.7 val.8)
                         (locals ()
                           (begin
                             (mset!
                               (mref self.7 16)
                               (* (mref self.7 8) 8)
                               val.8)
                             (mset! self.7 8 (+ (mref self.7 8) 1))
                             self.7)))]
         [stack-pop$3 (lambda (self.9)
                        (locals ()
                          (begin
                            (mset! self.9 8 (- (mref 8 self.9) 1))
                            (mref
                              (mref self.9 16)
                              (* (mref self.9 8) 8)))))]
         [stack-top$4 (lambda (self.9)
                        (locals ()
                          (mref
                            (mref self.9 16)
                            (* (- (mref 8 self.9) 1) 8))))])
  (locals (s1.10 s2.11)
    (begin
      (set! s1.10 (stack-new$0 10))
      ((invoke$1 s1.10 0) s1.10 10)
      ((invoke$1 s1.10 0) s1.10 20)
      ((invoke$1 s1.10 0) s1.10 30)
      ((invoke$1 s1.10 0) s1.10 40)
      ((invoke$1 s1.10 0) s1.10 50)
      ((invoke$1 s1.10 0) s1.10 60)
      ((invoke$1 s1.10 0) s1.10 70)
      ((invoke$1 s1.10 0) s1.10 80)
      ((invoke$1 s1.10 0) s1.10 90)
      ((invoke$1 s1.10 0) s1.10 100)
      (set! s2.11 (stack-new$0 5))
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      (+ (+ (+ ((invoke$1 s2.11 2) s2.11)
               ((invoke$1 s2.11 1) s2.11))
            (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11)))
         (+ (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11))
            (+ (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11))
               (+ ((invoke$1 s2.11 2) s2.11)
                  ((invoke$1 s2.11 1) s2.11))))))))

skip-used-name:
(letrec ([stack-new$0 (lambda (size.1)
                        (locals (stack.2 store.3 meths.4)
                          (begin
                            (set! store.3 (alloc (* 8 size.1)))
                            (set! meths.4 (alloc (* 3 8)))
                            (set! stack.2 (alloc (* 3 8)))
                            (mset! meths.4 0 stack-push$2)
                            (mset! meths.4 8 stack-pop$3)
                            (mset! meths.4 16 stack-top$4)
                            (mset! stack.2 0 meths.4)
                            (mset! stack.2 8 0)
                            (mset! stack.2 16 store.3)
                            stack.2)))]
         [invoke$1 (lambda (obj.5 meth-idx.6)
                     (locals () (mref (mref obj.5 0) (* meth-idx.6 8))))]
         [stack-push$2 (lambda (self.7 val.8)
                         (locals ()
                           (begin
                             (mset!
                               (mref self.7 16)
                               (* (mref self.7 8) 8)
                               val.8)
                             (mset! self.7 8 (+ (mref self.7 8) 1))
                             self.7)))]
         [stack-pop$3 (lambda (self.9)
                        (locals ()
                          (begin
                            (mset! self.9 8 (- (mref 8 self.9) 1))
                            (mref
                              (mref self.9 16)
                              (* (mref self.9 8) 8)))))]
         [stack-top$4 (lambda (self.9)
                        (locals ()
                          (mref
                            (mref self.9 16)
                            (* (- (mref 8 self.9) 1) 8))))])
  (locals (s1.10 s2.11)
    (begin
      (set! s1.10 (stack-new$0 10))
      ((invoke$1 s1.10 0) s1.10 10)
      ((invoke$1 s1.10 0) s1.10 20)
      ((invoke$1 s1.10 0) s1.10 30)
      ((invoke$1 s1.10 0) s1.10 40)
      ((invoke$1 s1.10 0) s1.10 50)
      ((invoke$1 s1.10 0) s1.10 60)
      ((invoke$1 s1.10 0) s1.10 70)
      ((invoke$1 s1.10 0) s1.10 80)
      ((invoke$1 s1.10 0) s1.10 90)
      ((invoke$1 s1.10 0) s1.10 100)
      (set! s2.11 (stack-new$0 5))
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      ((invoke$1 s2.11 0) s2.11 ((invoke$1 s1.10 1) s1.10))
      ((invoke$1 s1.10 1) s1.10)
      (+ (+ (+ ((invoke$1 s2.11 2) s2.11)
               ((invoke$1 s2.11 1) s2.11))
            (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11)))
         (+ (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11))
            (+ (+ ((invoke$1 s2.11 2) s2.11) ((invoke$1 s2.11 1) s2.11))
               (+ ((invoke$1 s2.11 2) s2.11)
                  ((invoke$1 s2.11 1) s2.11))))))))

remove-complex-opera*:
(letrec ([stack-new$0 (lambda (size.1)
                        (locals (stack.2 store.3 meths.4 t.151 t.152 t.153 t.154 t.155 t.156)
                          (begin
                            (set! t.155 (* 8 size.1))
                            (set! t.156 rdx)
                            (set! rdx (+ rdx t.155))
                            (set! store.3 t.156)
                            (set! t.153 (* 3 8))
                            (set! t.154 rdx)
                            (set! rdx (+ rdx t.153))
                            (set! meths.4 t.154)
                            (set! t.151 (* 3 8))
                            (set! t.152 rdx)
                            (set! rdx (+ rdx t.151))
                            (set! stack.2 t.152)
                            (set! (mref meths.4 0) stack-push$2)
                            (set! (mref meths.4 8) stack-pop$3)
                            (set! (mref meths.4 16) stack-top$4)
                            (set! (mref stack.2 0) meths.4)
                            (set! (mref stack.2 8) 0)
                            (set! (mref stack.2 16) store.3)
                            stack.2)))]
         [invoke$1 (lambda (obj.5 meth-idx.6)
                     (locals (t.149 t.150)
                       (begin
                         (set! t.149 (mref obj.5 0))
                         (set! t.150 (* meth-idx.6 8))
                         (mref t.149 t.150))))]
         [stack-push$2 (lambda (self.7 val.8)
                         (locals (t.147 t.148)
                           (begin
                             (set! t.147 (mref self.7 16))
                             (set! t.148 (* (mref self.7 8) 8))
                             (set! (mref t.147 t.148) val.8)
                             (set! (mref self.7 8) (+ (mref self.7 8) 1))
                             self.7)))]
         [stack-pop$3 (lambda (self.9)
                        (locals (t.145 t.146)
                          (begin
                            (set! (mref self.9 8) (- (mref 8 self.9) 1))
                            (set! t.145 (mref self.9 16))
                            (set! t.146 (* (mref self.9 8) 8))
                            (mref t.145 t.146))))]
         [stack-top$4 (lambda (self.9)
                        (locals (t.142 t.143 t.144)
                          (begin
                            (set! t.142 (mref self.9 16))
                            (set! t.143 (- (mref 8 self.9) 1))
                            (set! t.144 (* t.143 8))
                            (mref t.142 t.144))))])
  (locals (s1.10 s2.11 t.15 t.17 t.19 t.22 t.25 t.27 t.29 t.32 t.35 t.37 t.39 t.42 t.45 t.47 t.49 t.52 t.55 t.57 t.59 t.62 t.65 t.68 t.71 t.74 t.77 t.80 t.83 t.86 t.89 t.92 t.95 t.97 t.99 t.101 t.102 t.104 t.106 t.108 t.110 t.111 t.112 t.114 t.116 t.118 t.120 t.121 t.123 t.125 t.127 t.129 t.130 t.132 t.134 t.136 t.138 t.139 t.140 t.141)
    (begin
      (set! s1.10 (return-point rp$13 (stack-new$0 10)))
      (set! t.92 (return-point rp$91 (invoke$1 s1.10 0)))
      (return-point rp$93 (t.92 s1.10 10))
      (set! t.86 (return-point rp$85 (invoke$1 s1.10 0)))
      (return-point rp$87 (t.86 s1.10 20))
      (set! t.89 (return-point rp$88 (invoke$1 s1.10 0)))
      (return-point rp$90 (t.89 s1.10 30))
      (set! t.80 (return-point rp$79 (invoke$1 s1.10 0)))
      (return-point rp$81 (t.80 s1.10 40))
      (set! t.83 (return-point rp$82 (invoke$1 s1.10 0)))
      (return-point rp$84 (t.83 s1.10 50))
      (set! t.74 (return-point rp$73 (invoke$1 s1.10 0)))
      (return-point rp$75 (t.74 s1.10 60))
      (set! t.77 (return-point rp$76 (invoke$1 s1.10 0)))
      (return-point rp$78 (t.77 s1.10 70))
      (set! t.68 (return-point rp$67 (invoke$1 s1.10 0)))
      (return-point rp$69 (t.68 s1.10 80))
      (set! t.71 (return-point rp$70 (invoke$1 s1.10 0)))
      (return-point rp$72 (t.71 s1.10 90))
      (set! t.65 (return-point rp$64 (invoke$1 s1.10 0)))
      (return-point rp$66 (t.65 s1.10 100))
      (set! s2.11 (return-point rp$12 (stack-new$0 5)))
      (set! t.55 (return-point rp$54 (invoke$1 s2.11 0)))
      (set! t.57 (return-point rp$56 (invoke$1 s1.10 1)))
      (set! t.59 (return-point rp$58 (t.57 s1.10)))
      (return-point rp$60 (t.55 s2.11 t.59))
      (set! t.62 (return-point rp$61 (invoke$1 s1.10 1)))
      (return-point rp$63 (t.62 s1.10))
      (set! t.45 (return-point rp$44 (invoke$1 s2.11 0)))
      (set! t.47 (return-point rp$46 (invoke$1 s1.10 1)))
      (set! t.49 (return-point rp$48 (t.47 s1.10)))
      (return-point rp$50 (t.45 s2.11 t.49))
      (set! t.52 (return-point rp$51 (invoke$1 s1.10 1)))
      (return-point rp$53 (t.52 s1.10))
      (set! t.35 (return-point rp$34 (invoke$1 s2.11 0)))
      (set! t.37 (return-point rp$36 (invoke$1 s1.10 1)))
      (set! t.39 (return-point rp$38 (t.37 s1.10)))
      (return-point rp$40 (t.35 s2.11 t.39))
      (set! t.42 (return-point rp$41 (invoke$1 s1.10 1)))
      (return-point rp$43 (t.42 s1.10))
      (set! t.25 (return-point rp$24 (invoke$1 s2.11 0)))
      (set! t.27 (return-point rp$26 (invoke$1 s1.10 1)))
      (set! t.29 (return-point rp$28 (t.27 s1.10)))
      (return-point rp$30 (t.25 s2.11 t.29))
      (set! t.32 (return-point rp$31 (invoke$1 s1.10 1)))
      (return-point rp$33 (t.32 s1.10))
      (set! t.15 (return-point rp$14 (invoke$1 s2.11 0)))
      (set! t.17 (return-point rp$16 (invoke$1 s1.10 1)))
      (set! t.19 (return-point rp$18 (t.17 s1.10)))
      (return-point rp$20 (t.15 s2.11 t.19))
      (set! t.22 (return-point rp$21 (invoke$1 s1.10 1)))
      (return-point rp$23 (t.22 s1.10))
      (set! t.95 (return-point rp$94 (invoke$1 s2.11 2)))
      (set! t.97 (return-point rp$96 (t.95 s2.11)))
      (set! t.99 (return-point rp$98 (invoke$1 s2.11 1)))
      (set! t.101 (return-point rp$100 (t.99 s2.11)))
      (set! t.102 (+ t.97 t.101))
      (set! t.104 (return-point rp$103 (invoke$1 s2.11 2)))
      (set! t.106 (return-point rp$105 (t.104 s2.11)))
      (set! t.108 (return-point rp$107 (invoke$1 s2.11 1)))
      (set! t.110 (return-point rp$109 (t.108 s2.11)))
      (set! t.111 (+ t.106 t.110))
      (set! t.112 (+ t.102 t.111))
      (set! t.114 (return-point rp$113 (invoke$1 s2.11 2)))
      (set! t.116 (return-point rp$115 (t.114 s2.11)))
      (set! t.118 (return-point rp$117 (invoke$1 s2.11 1)))
      (set! t.120 (return-point rp$119 (t.118 s2.11)))
      (set! t.121 (+ t.116 t.120))
      (set! t.123 (return-point rp$122 (invoke$1 s2.11 2)))
      (set! t.125 (return-point rp$124 (t.123 s2.11)))
      (set! t.127 (return-point rp$126 (invoke$1 s2.11 1)))
      (set! t.129 (return-point rp$128 (t.127 s2.11)))
      (set! t.130 (+ t.125 t.129))
      (set! t.132 (return-point rp$131 (invoke$1 s2.11 2)))
      (set! t.134 (return-point rp$133 (t.132 s2.11)))
      (set! t.136 (return-point rp$135 (invoke$1 s2.11 1)))
      (set! t.138 (return-point rp$137 (t.136 s2.11)))
      (set! t.139 (+ t.134 t.138))
      (set! t.140 (+ t.130 t.139))
      (set! t.141 (+ t.121 t.140))
      (+ t.112 t.141))))
