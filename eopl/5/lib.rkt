#lang eopl

(#%provide (all-defined))

(define (begin-red) (display "\033[91m"))
(define (begin-green) (display "\033[92m"))
(define (begin-yellow) (display "\033[93m"))
(define (end-color) (display "\033[0m"))

(define (interp-disp interp expval->value sources other-summary)
  (define (iter prev-count sources wrong)
    (if (null? sources)
      (cons wrong prev-count)
      (let ((count (+ 1 prev-count))
            (src (car sources))
            (answer (cadr sources)))
        (display count)(display ":")(newline)
        (begin-green)
        (display src)(newline)
        (begin-red)
        (let ((output (interp src)))
          (eopl:pretty-print output)
          (end-color)
          (if (eqv? answer (expval->value output))
            (iter count (cddr sources) wrong)
            (begin
              (begin-yellow)
              (display "WRONG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!~%")
              (end-color)
              (iter count (cddr sources) (+ wrong 1))))))))
  (let ((summary (iter 0 sources 0)))
    (eopl:printf "SUMMARY(wrong/total): ~a/~a.~%" (car summary) (cdr summary))
    (other-summary)))
